/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 rachel.glb
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useXR } from '@react-three/xr'
import { createMachine, interpret } from 'xstate'


export function Rachel(props) {
  const group = useRef()
  const body = useRef()
  const leftEye = useRef()
  const rightEye = useRef()

  // const focusObject = useRef()

  const { nodes, materials, animations } = useGLTF('./models/Rachel/rachel.glb')
  const { actions } = useAnimations(animations, group)
  const { player, isPresenting } = useXR()

  const currentState = useRef("standing")
  const lastAction = useRef(null)
  const activeAction = useRef(null)

  const fadeTo = (action, duration) => {
    lastAction.current = activeAction.current
    if (lastAction.current) {
      lastAction.current.fadeOut(duration)
    }
    activeAction.current = action
    activeAction.current.reset()
    activeAction.current.fadeIn(duration)
    activeAction.current.play()
  }

  const walk = (context, event) => {
    if (actions?.Walking) {
      fadeTo(actions.Walking, 0.5)
    }
    currentState.current = "walking"
  }

  const stand = (context, event) => {
    if (actions?.StandingIdle) {
      fadeTo(actions.StandingIdle, 0.5)
    }
    currentState.current = "standing"
  }

  const blink = () => {
    body.current.morphTargetInfluences[1] = 1
    setTimeout(() => {
      body.current.morphTargetInfluences[1] = 0.1
    }, 100)
  }

  // const goalPosition = useRef(new Vector3(-10, -7, -10))
  
  const locomotionMachine = createMachine({
    predictableActionArguments: true,
    id: "locomotion",
    initial: "standing",
    states: {
      standing: {
        entry: ["stand"],
        on: {
          WALK: "walking",
        },
      },
      walking: {
        entry: ["walk"],
        on: {
          STOP: "standing",
        },
      },
    },
  }, {
    actions: { walk, stand },
  })

  const locomotionActor = interpret(locomotionMachine).start()

  useEffect(() => {
    setInterval(() => {
      if (currentState.current === "standing") {
        locomotionActor.send({ type: "WALK" })
      } else {
        locomotionActor.send({ type: "STOP" })
      }
    }, 3000)
  })

  useFrame((state, delta) => {
    const posObj = isPresenting ? player.position : state.camera.position
    const posAvatar = group.current.position

    const xDist = posObj.x - posAvatar.x
    const zDist = posObj.z - posAvatar.z
    const angle = Math.atan2(zDist, xDist) * 180 / Math.PI

    group.current.rotation.y = angle

    if (Math.random() < 0.01) {
      blink()
    }

    if (Math.random() < 0.005) {
      body.current.morphTargetInfluences[0] = 1 - body.current.morphTargetInfluences[0]
    }

    // if (Math.random() < 0.03) {
    //   if (focusObject.current) {
    //     const head = group.current.children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0]
    //   }
    // }


  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="Ch02_Cloth" geometry={nodes.Ch02_Cloth.geometry} material={materials.Ch02_body} skeleton={nodes.Ch02_Cloth.skeleton} />
          <skinnedMesh name="Ch02_Hair" geometry={nodes.Ch02_Hair.geometry} material={materials.Ch02_hair} skeleton={nodes.Ch02_Hair.skeleton} />
          <skinnedMesh ref={leftEye} name="Ch02_Left_Eye" geometry={nodes.Ch02_Left_Eye.geometry} material={materials.Eyes} skeleton={nodes.Ch02_Left_Eye.skeleton} />
          <skinnedMesh ref={rightEye} name="Ch02_Right_Eye" geometry={nodes.Ch02_Right_Eye.geometry} material={materials.Eyes} skeleton={nodes.Ch02_Right_Eye.skeleton} />
          <skinnedMesh name="Ch02_Sneakers" geometry={nodes.Ch02_Sneakers.geometry} material={materials.Ch02_body} skeleton={nodes.Ch02_Sneakers.skeleton} />
          <skinnedMesh name="Ch02_Socks" geometry={nodes.Ch02_Socks.geometry} material={materials.Ch02_body} skeleton={nodes.Ch02_Socks.skeleton} />
          <skinnedMesh ref={body} name="Ch02_Body" geometry={nodes.Ch02_Body.geometry} material={materials.Ch02_body} skeleton={nodes.Ch02_Body.skeleton} morphTargetDictionary={nodes.Ch02_Body.morphTargetDictionary} morphTargetInfluences={nodes.Ch02_Body.morphTargetInfluences} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('./models/Rachel/rachel.glb')
